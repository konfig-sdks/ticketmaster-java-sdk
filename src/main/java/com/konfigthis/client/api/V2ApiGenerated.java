/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Attraction;
import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.EventImages;
import com.konfigthis.client.model.Genre;
import com.konfigthis.client.model.Level;
import com.konfigthis.client.model.Segment;
import com.konfigthis.client.model.Venue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V2ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V2ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public V2ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call eventSearchCall(String sort, String startDateTime, String endDateTime, String onsaleStartDateTime, String onsaleOnStartDate, String onsaleOnAfterStartDate, String onsaleEndDateTime, String city, String countryCode, String stateCode, String postalCode, String venueId, String attractionId, String segmentId, String segmentName, List<Object> classificationName, List<Object> classificationId, String marketId, String promoterId, String dmaId, String includeTBA, String includeTBD, String clientVisibility, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (startDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDateTime", startDateTime));
        }

        if (endDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDateTime", endDateTime));
        }

        if (onsaleStartDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onsaleStartDateTime", onsaleStartDateTime));
        }

        if (onsaleOnStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onsaleOnStartDate", onsaleOnStartDate));
        }

        if (onsaleOnAfterStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onsaleOnAfterStartDate", onsaleOnAfterStartDate));
        }

        if (onsaleEndDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onsaleEndDateTime", onsaleEndDateTime));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (stateCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateCode", stateCode));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
        }

        if (venueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("venueId", venueId));
        }

        if (attractionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attractionId", attractionId));
        }

        if (segmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segmentId", segmentId));
        }

        if (segmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segmentName", segmentName));
        }

        if (classificationName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "classificationName", classificationName));
        }

        if (classificationId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "classificationId", classificationId));
        }

        if (marketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketId", marketId));
        }

        if (promoterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("promoterId", promoterId));
        }

        if (dmaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dmaId", dmaId));
        }

        if (includeTBA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTBA", includeTBA));
        }

        if (includeTBD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTBD", includeTBD));
        }

        if (clientVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientVisibility", clientVisibility));
        }

        if (latlong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latlong", latlong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (geoPoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoPoint", geoPoint));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (includeTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTest", includeTest));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        if (includeSpellcheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSpellcheck", includeSpellcheck));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSearchValidateBeforeCall(String sort, String startDateTime, String endDateTime, String onsaleStartDateTime, String onsaleOnStartDate, String onsaleOnAfterStartDate, String onsaleEndDateTime, String city, String countryCode, String stateCode, String postalCode, String venueId, String attractionId, String segmentId, String segmentName, List<Object> classificationName, List<Object> classificationId, String marketId, String promoterId, String dmaId, String includeTBA, String includeTBD, String clientVisibility, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        return eventSearchCall(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);

    }


    private ApiResponse<List<Event>> eventSearchWithHttpInfo(String sort, String startDateTime, String endDateTime, String onsaleStartDateTime, String onsaleOnStartDate, String onsaleOnAfterStartDate, String onsaleEndDateTime, String city, String countryCode, String stateCode, String postalCode, String venueId, String attractionId, String segmentId, String segmentName, List<Object> classificationName, List<Object> classificationId, String marketId, String promoterId, String dmaId, String includeTBA, String includeTBD, String clientVisibility, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck) throws ApiException {
        okhttp3.Call localVarCall = eventSearchValidateBeforeCall(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call eventSearchAsync(String sort, String startDateTime, String endDateTime, String onsaleStartDateTime, String onsaleOnStartDate, String onsaleOnAfterStartDate, String onsaleEndDateTime, String city, String countryCode, String stateCode, String postalCode, String venueId, String attractionId, String segmentId, String segmentName, List<Object> classificationName, List<Object> classificationId, String marketId, String promoterId, String dmaId, String includeTBA, String includeTBD, String clientVisibility, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSearchValidateBeforeCall(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EventSearchRequestBuilder {
        private String sort;
        private String startDateTime;
        private String endDateTime;
        private String onsaleStartDateTime;
        private String onsaleOnStartDate;
        private String onsaleOnAfterStartDate;
        private String onsaleEndDateTime;
        private String city;
        private String countryCode;
        private String stateCode;
        private String postalCode;
        private String venueId;
        private String attractionId;
        private String segmentId;
        private String segmentName;
        private List<Object> classificationName;
        private List<Object> classificationId;
        private String marketId;
        private String promoterId;
        private String dmaId;
        private String includeTBA;
        private String includeTBD;
        private String clientVisibility;
        private String latlong;
        private String radius;
        private String unit;
        private String geoPoint;
        private String keyword;
        private String id;
        private String source;
        private String includeTest;
        private String page;
        private String size;
        private String locale;
        private String includeLicensedContent;
        private String includeSpellcheck;

        private EventSearchRequestBuilder() {
        }

        /**
         * Set sort
         * @param sort Sorting order of the search result. Allowable values : &#39;name,asc&#39;, &#39;name,desc&#39;, &#39;date,asc&#39;, &#39;date,desc&#39;, &#39;relevance,asc&#39;, &#39;relevance,desc&#39;, &#39;distance,asc&#39;, &#39;name,date,asc&#39;, &#39;name,date,desc&#39;, &#39;date,name,asc&#39;, &#39;date,name,desc&#39;,&#39;onsaleStartDate,asc&#39;, &#39;id,asc&#39; (optional, default to relevance,desc)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set startDateTime
         * @param startDateTime Filter events with a start date after this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder startDateTime(String startDateTime) {
            this.startDateTime = startDateTime;
            return this;
        }
        
        /**
         * Set endDateTime
         * @param endDateTime Filter events with a start date before this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder endDateTime(String endDateTime) {
            this.endDateTime = endDateTime;
            return this;
        }
        
        /**
         * Set onsaleStartDateTime
         * @param onsaleStartDateTime Filter events with onsale start date after this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder onsaleStartDateTime(String onsaleStartDateTime) {
            this.onsaleStartDateTime = onsaleStartDateTime;
            return this;
        }
        
        /**
         * Set onsaleOnStartDate
         * @param onsaleOnStartDate Filter events with onsale start date on this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder onsaleOnStartDate(String onsaleOnStartDate) {
            this.onsaleOnStartDate = onsaleOnStartDate;
            return this;
        }
        
        /**
         * Set onsaleOnAfterStartDate
         * @param onsaleOnAfterStartDate Filter events with onsale range within this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder onsaleOnAfterStartDate(String onsaleOnAfterStartDate) {
            this.onsaleOnAfterStartDate = onsaleOnAfterStartDate;
            return this;
        }
        
        /**
         * Set onsaleEndDateTime
         * @param onsaleEndDateTime Filter events with onsale end date before this date (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder onsaleEndDateTime(String onsaleEndDateTime) {
            this.onsaleEndDateTime = onsaleEndDateTime;
            return this;
        }
        
        /**
         * Set city
         * @param city Filter events by city (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Filter events by country code (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set stateCode
         * @param stateCode Filter events by state code (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder stateCode(String stateCode) {
            this.stateCode = stateCode;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Filter events by postal code / zipcode (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set venueId
         * @param venueId Filter events by venue id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder venueId(String venueId) {
            this.venueId = venueId;
            return this;
        }
        
        /**
         * Set attractionId
         * @param attractionId Filter events by attraction id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder attractionId(String attractionId) {
            this.attractionId = attractionId;
            return this;
        }
        
        /**
         * Set segmentId
         * @param segmentId Filter events by segment id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder segmentId(String segmentId) {
            this.segmentId = segmentId;
            return this;
        }
        
        /**
         * Set segmentName
         * @param segmentName Filter events by segment name (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder segmentName(String segmentName) {
            this.segmentName = segmentName;
            return this;
        }
        
        /**
         * Set classificationName
         * @param classificationName Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type (optional)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder classificationName(List<Object> classificationName) {
            this.classificationName = classificationName;
            return this;
        }
        
        /**
         * Set classificationId
         * @param classificationId Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type (optional)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder classificationId(List<Object> classificationId) {
            this.classificationId = classificationId;
            return this;
        }
        
        /**
         * Set marketId
         * @param marketId Filter events by market id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder marketId(String marketId) {
            this.marketId = marketId;
            return this;
        }
        
        /**
         * Set promoterId
         * @param promoterId Filter events by promoter id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder promoterId(String promoterId) {
            this.promoterId = promoterId;
            return this;
        }
        
        /**
         * Set dmaId
         * @param dmaId Filter events by dma id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder dmaId(String dmaId) {
            this.dmaId = dmaId;
            return this;
        }
        
        /**
         * Set includeTBA
         * @param includeTBA True, to include events with date to be announce (TBA) (optional, default to no if date parameter sent, yes otherwise)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder includeTBA(String includeTBA) {
            this.includeTBA = includeTBA;
            return this;
        }
        
        /**
         * Set includeTBD
         * @param includeTBD True, to include event with a date to be defined (TBD) (optional, default to no if date parameter sent, yes otherwise)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder includeTBD(String includeTBD) {
            this.includeTBD = includeTBD;
            return this;
        }
        
        /**
         * Set clientVisibility
         * @param clientVisibility Filter events by clientName (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder clientVisibility(String clientVisibility) {
            this.clientVisibility = clientVisibility;
            return this;
        }
        
        /**
         * Set latlong
         * @param latlong Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder latlong(String latlong) {
            this.latlong = latlong;
            return this;
        }
        
        /**
         * Set radius
         * @param radius Radius of the area in which we want to search for events. (optional, default to 50)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder radius(String radius) {
            this.radius = radius;
            return this;
        }
        
        /**
         * Set unit
         * @param unit Unit of the radius (optional, default to miles)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set geoPoint
         * @param geoPoint filter events by geoHash (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder geoPoint(String geoPoint) {
            this.geoPoint = geoPoint;
            return this;
        }
        
        /**
         * Set keyword
         * @param keyword Keyword to search on (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }
        
        /**
         * Set id
         * @param id Filter entities by its id (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set source
         * @param source Filter entities by its source name (optional, default to )
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set includeTest
         * @param includeTest True if you want to have entities flag as test in the response. Only, if you only wanted test entities (optional, default to false)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder includeTest(String includeTest) {
            this.includeTest = includeTest;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 0)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set size
         * @param size Page size of the response (optional, default to 20)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent Yes if you want to display licensed content (optional, default to false)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Set includeSpellcheck
         * @param includeSpellcheck yes, to include spell check suggestions in the response. (optional, default to false)
         * @return EventSearchRequestBuilder
         */
        public EventSearchRequestBuilder includeSpellcheck(String includeSpellcheck) {
            this.includeSpellcheck = includeSpellcheck;
            return this;
        }
        
        /**
         * Build call for eventSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return eventSearchCall(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }


        /**
         * Execute eventSearch request
         * @return List&lt;Event&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Event> execute() throws ApiException {
            ApiResponse<List<Event>> localVarResp = eventSearchWithHttpInfo(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute eventSearch request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Event&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Event>> executeWithHttpInfo() throws ApiException {
            return eventSearchWithHttpInfo(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
        }

        /**
         * Execute eventSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Event>> _callback) throws ApiException {
            return eventSearchAsync(sort, startDateTime, endDateTime, onsaleStartDateTime, onsaleOnStartDate, onsaleOnAfterStartDate, onsaleEndDateTime, city, countryCode, stateCode, postalCode, venueId, attractionId, segmentId, segmentName, classificationName, classificationId, marketId, promoterId, dmaId, includeTBA, includeTBD, clientVisibility, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }
    }

    /**
     * Event Search
     * Find events and filter your search by location, date, availability, and much more.
     * @return EventSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public EventSearchRequestBuilder eventSearch() throws IllegalArgumentException {
        return new EventSearchRequestBuilder();
    }
    private okhttp3.Call findSuggestCall(String keyword, String source, String latlong, String radius, String unit, String size, String includeFuzzy, String clientVisibility, String countryCode, String includeTBA, String includeTBD, String segmentId, String geoPoint, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (latlong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latlong", latlong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (includeFuzzy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFuzzy", includeFuzzy));
        }

        if (clientVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientVisibility", clientVisibility));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (includeTBA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTBA", includeTBA));
        }

        if (includeTBD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTBD", includeTBD));
        }

        if (segmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segmentId", segmentId));
        }

        if (geoPoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoPoint", geoPoint));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        if (includeSpellcheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSpellcheck", includeSpellcheck));
        }

        final String[] localVarAccepts = {
            "application/hal+json; charset=utf-8",
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSuggestValidateBeforeCall(String keyword, String source, String latlong, String radius, String unit, String size, String includeFuzzy, String clientVisibility, String countryCode, String includeTBA, String includeTBD, String segmentId, String geoPoint, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        return findSuggestCall(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck, _callback);

    }


    private ApiResponse<String> findSuggestWithHttpInfo(String keyword, String source, String latlong, String radius, String unit, String size, String includeFuzzy, String clientVisibility, String countryCode, String includeTBA, String includeTBD, String segmentId, String geoPoint, String locale, String includeLicensedContent, String includeSpellcheck) throws ApiException {
        okhttp3.Call localVarCall = findSuggestValidateBeforeCall(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findSuggestAsync(String keyword, String source, String latlong, String radius, String unit, String size, String includeFuzzy, String clientVisibility, String countryCode, String includeTBA, String includeTBD, String segmentId, String geoPoint, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSuggestValidateBeforeCall(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindSuggestRequestBuilder {
        private String keyword;
        private String source;
        private String latlong;
        private String radius;
        private String unit;
        private String size;
        private String includeFuzzy;
        private String clientVisibility;
        private String countryCode;
        private String includeTBA;
        private String includeTBD;
        private String segmentId;
        private String geoPoint;
        private String locale;
        private String includeLicensedContent;
        private String includeSpellcheck;

        private FindSuggestRequestBuilder() {
        }

        /**
         * Set keyword
         * @param keyword Keyword to search on (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }
        
        /**
         * Set source
         * @param source Filter entities by its source name (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set latlong
         * @param latlong Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder latlong(String latlong) {
            this.latlong = latlong;
            return this;
        }
        
        /**
         * Set radius
         * @param radius Radius of the area in which we want to search for events. (optional, default to 100)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder radius(String radius) {
            this.radius = radius;
            return this;
        }
        
        /**
         * Set unit
         * @param unit Unit of the radius (optional, default to miles)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set size
         * @param size Size of every entity returned in the response (optional, default to 5)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set includeFuzzy
         * @param includeFuzzy yes, to include fuzzy matches in the search. This has performance impact. (optional, default to false)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder includeFuzzy(String includeFuzzy) {
            this.includeFuzzy = includeFuzzy;
            return this;
        }
        
        /**
         * Set clientVisibility
         * @param clientVisibility Filter events to clientName (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder clientVisibility(String clientVisibility) {
            this.clientVisibility = clientVisibility;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Filter suggestions by country code (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set includeTBA
         * @param includeTBA True, to include events with date to be announce (TBA) (optional, default to no if date parameter sent, yes otherwise)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder includeTBA(String includeTBA) {
            this.includeTBA = includeTBA;
            return this;
        }
        
        /**
         * Set includeTBD
         * @param includeTBD True, to include event with a date to be defined (TBD) (optional, default to no if date parameter sent, yes otherwise)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder includeTBD(String includeTBD) {
            this.includeTBD = includeTBD;
            return this;
        }
        
        /**
         * Set segmentId
         * @param segmentId Filter suggestions by segment id (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder segmentId(String segmentId) {
            this.segmentId = segmentId;
            return this;
        }
        
        /**
         * Set geoPoint
         * @param geoPoint filter events by geoHash (optional, default to )
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder geoPoint(String geoPoint) {
            this.geoPoint = geoPoint;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent Yes if you want to display licensed content (optional, default to false)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Set includeSpellcheck
         * @param includeSpellcheck yes, to include spell check suggestions in the response. (optional, default to false)
         * @return FindSuggestRequestBuilder
         */
        public FindSuggestRequestBuilder includeSpellcheck(String includeSpellcheck) {
            this.includeSpellcheck = includeSpellcheck;
            return this;
        }
        
        /**
         * Build call for findSuggest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findSuggestCall(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck, _callback);
        }


        /**
         * Execute findSuggest request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = findSuggestWithHttpInfo(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findSuggest request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return findSuggestWithHttpInfo(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck);
        }

        /**
         * Execute findSuggest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return findSuggestAsync(keyword, source, latlong, radius, unit, size, includeFuzzy, clientVisibility, countryCode, includeTBA, includeTBD, segmentId, geoPoint, locale, includeLicensedContent, includeSpellcheck, _callback);
        }
    }

    /**
     * Find Suggest
     * Find search suggestions and filter your suggestions by location, source, etc.
     * @return FindSuggestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public FindSuggestRequestBuilder findSuggest() throws IllegalArgumentException {
        return new FindSuggestRequestBuilder();
    }
    private okhttp3.Call findVenuesCall(String sort, String stateCode, String countryCode, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/venues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (stateCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateCode", stateCode));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (latlong != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latlong", latlong));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (geoPoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoPoint", geoPoint));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (includeTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTest", includeTest));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        if (includeSpellcheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSpellcheck", includeSpellcheck));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findVenuesValidateBeforeCall(String sort, String stateCode, String countryCode, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        return findVenuesCall(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);

    }


    private ApiResponse<List<Venue>> findVenuesWithHttpInfo(String sort, String stateCode, String countryCode, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck) throws ApiException {
        okhttp3.Call localVarCall = findVenuesValidateBeforeCall(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, null);
        Type localVarReturnType = new TypeToken<List<Venue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findVenuesAsync(String sort, String stateCode, String countryCode, String latlong, String radius, String unit, String geoPoint, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback<List<Venue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findVenuesValidateBeforeCall(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        Type localVarReturnType = new TypeToken<List<Venue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindVenuesRequestBuilder {
        private String sort;
        private String stateCode;
        private String countryCode;
        private String latlong;
        private String radius;
        private String unit;
        private String geoPoint;
        private String keyword;
        private String id;
        private String source;
        private String includeTest;
        private String page;
        private String size;
        private String locale;
        private String includeLicensedContent;
        private String includeSpellcheck;

        private FindVenuesRequestBuilder() {
        }

        /**
         * Set sort
         * @param sort Sorting order of the search result. Allowable Values: &#39;name,asc&#39;, &#39;name,desc&#39;, &#39;relevance,asc&#39;, &#39;relevance,desc&#39;, &#39;distance,asc&#39;, &#39;distance,desc&#39; (optional, default to relevance,desc)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set stateCode
         * @param stateCode Filter venues by state / province code (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder stateCode(String stateCode) {
            this.stateCode = stateCode;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Filter venues by country code (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set latlong
         * @param latlong Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder latlong(String latlong) {
            this.latlong = latlong;
            return this;
        }
        
        /**
         * Set radius
         * @param radius Radius of the area in which we want to search for events. (optional, default to 50)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder radius(String radius) {
            this.radius = radius;
            return this;
        }
        
        /**
         * Set unit
         * @param unit Unit of the radius (optional, default to miles)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder unit(String unit) {
            this.unit = unit;
            return this;
        }
        
        /**
         * Set geoPoint
         * @param geoPoint filter events by geoHash (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder geoPoint(String geoPoint) {
            this.geoPoint = geoPoint;
            return this;
        }
        
        /**
         * Set keyword
         * @param keyword Keyword to search on (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }
        
        /**
         * Set id
         * @param id Filter entities by its id (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set source
         * @param source Filter entities by its source name (optional, default to )
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set includeTest
         * @param includeTest True if you want to have entities flag as test in the response. Only, if you only wanted test entities (optional, default to false)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder includeTest(String includeTest) {
            this.includeTest = includeTest;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 0)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set size
         * @param size Page size of the response (optional, default to 20)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent Yes if you want to display licensed content (optional, default to false)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Set includeSpellcheck
         * @param includeSpellcheck yes, to include spell check suggestions in the response. (optional, default to false)
         * @return FindVenuesRequestBuilder
         */
        public FindVenuesRequestBuilder includeSpellcheck(String includeSpellcheck) {
            this.includeSpellcheck = includeSpellcheck;
            return this;
        }
        
        /**
         * Build call for findVenues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findVenuesCall(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }


        /**
         * Execute findVenues request
         * @return List&lt;Venue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Venue> execute() throws ApiException {
            ApiResponse<List<Venue>> localVarResp = findVenuesWithHttpInfo(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findVenues request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Venue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Venue>> executeWithHttpInfo() throws ApiException {
            return findVenuesWithHttpInfo(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
        }

        /**
         * Execute findVenues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Venue>> _callback) throws ApiException {
            return findVenuesAsync(sort, stateCode, countryCode, latlong, radius, unit, geoPoint, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }
    }

    /**
     * Venue Search
     * Find venues and filter your search by name, and much more.
     * @return FindVenuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public FindVenuesRequestBuilder findVenues() throws IllegalArgumentException {
        return new FindVenuesRequestBuilder();
    }
    private okhttp3.Call getAttractionDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/attractions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttractionDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAttractionDetails(Async)");
        }

        return getAttractionDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Attraction> getAttractionDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getAttractionDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Attraction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttractionDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Attraction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttractionDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Attraction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttractionDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetAttractionDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetAttractionDetailsRequestBuilder
         */
        public GetAttractionDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetAttractionDetailsRequestBuilder
         */
        public GetAttractionDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getAttractionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttractionDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getAttractionDetails request
         * @return Attraction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Attraction execute() throws ApiException {
            ApiResponse<Attraction> localVarResp = getAttractionDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttractionDetails request with HTTP info returned
         * @return ApiResponse&lt;Attraction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Attraction> executeWithHttpInfo() throws ApiException {
            return getAttractionDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getAttractionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Attraction> _callback) throws ApiException {
            return getAttractionDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Attraction Details
     * Get details for a specific attraction using the unique identifier for the attraction.
     * @param id ID of the attraction (required)
     * @return GetAttractionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAttractionDetailsRequestBuilder getAttractionDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAttractionDetailsRequestBuilder(id);
    }
    private okhttp3.Call getClassificationDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/classifications/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassificationDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClassificationDetails(Async)");
        }

        return getClassificationDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Classification> getClassificationDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getClassificationDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getClassificationDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Classification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassificationDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Classification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetClassificationDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetClassificationDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetClassificationDetailsRequestBuilder
         */
        public GetClassificationDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetClassificationDetailsRequestBuilder
         */
        public GetClassificationDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getClassificationDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getClassificationDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getClassificationDetails request
         * @return Classification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Classification execute() throws ApiException {
            ApiResponse<Classification> localVarResp = getClassificationDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getClassificationDetails request with HTTP info returned
         * @return ApiResponse&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Classification> executeWithHttpInfo() throws ApiException {
            return getClassificationDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getClassificationDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Classification> _callback) throws ApiException {
            return getClassificationDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Classification Details
     * Get details for a specific segment, genre, or sub-genre using its unique identifier.
     * @param id ID of the segment, genre, or sub-genre (required)
     * @return GetClassificationDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetClassificationDetailsRequestBuilder getClassificationDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetClassificationDetailsRequestBuilder(id);
    }
    private okhttp3.Call getEventDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEventDetails(Async)");
        }

        return getEventDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Event> getEventDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getEventDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetEventDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetEventDetailsRequestBuilder
         */
        public GetEventDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetEventDetailsRequestBuilder
         */
        public GetEventDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getEventDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getEventDetails request
         * @return Event
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Event execute() throws ApiException {
            ApiResponse<Event> localVarResp = getEventDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventDetails request with HTTP info returned
         * @return ApiResponse&lt;Event&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Event> executeWithHttpInfo() throws ApiException {
            return getEventDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getEventDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Event> _callback) throws ApiException {
            return getEventDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Event Details
     * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
     * @param id ID of the event (required)
     * @return GetEventDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetEventDetailsRequestBuilder getEventDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventDetailsRequestBuilder(id);
    }
    private okhttp3.Call getEventImagesCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/events/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventImagesValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEventImages(Async)");
        }

        return getEventImagesCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<EventImages> getEventImagesWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getEventImagesValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<EventImages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventImagesAsync(String id, String locale, String includeLicensedContent, final ApiCallback<EventImages> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventImagesValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<EventImages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventImagesRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetEventImagesRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetEventImagesRequestBuilder
         */
        public GetEventImagesRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetEventImagesRequestBuilder
         */
        public GetEventImagesRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getEventImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventImagesCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getEventImages request
         * @return EventImages
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public EventImages execute() throws ApiException {
            ApiResponse<EventImages> localVarResp = getEventImagesWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventImages request with HTTP info returned
         * @return ApiResponse&lt;EventImages&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventImages> executeWithHttpInfo() throws ApiException {
            return getEventImagesWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getEventImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventImages> _callback) throws ApiException {
            return getEventImagesAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Event Images
     * Get images for a specific event using the unique identifier for the event.
     * @param id ID of the event (required)
     * @return GetEventImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetEventImagesRequestBuilder getEventImages(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEventImagesRequestBuilder(id);
    }
    private okhttp3.Call getGenreDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/classifications/genres/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenreDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGenreDetails(Async)");
        }

        return getGenreDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Genre> getGenreDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getGenreDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Genre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGenreDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Genre> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenreDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Genre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGenreDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetGenreDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetGenreDetailsRequestBuilder
         */
        public GetGenreDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetGenreDetailsRequestBuilder
         */
        public GetGenreDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getGenreDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGenreDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getGenreDetails request
         * @return Genre
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Genre execute() throws ApiException {
            ApiResponse<Genre> localVarResp = getGenreDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGenreDetails request with HTTP info returned
         * @return ApiResponse&lt;Genre&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Genre> executeWithHttpInfo() throws ApiException {
            return getGenreDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getGenreDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Genre> _callback) throws ApiException {
            return getGenreDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Genre Details
     * Get details for a specific genre using its unique identifier.
     * @param id ID of the genre (required)
     * @return GetGenreDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetGenreDetailsRequestBuilder getGenreDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetGenreDetailsRequestBuilder(id);
    }
    private okhttp3.Call getSegmentDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/classifications/segments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSegmentDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSegmentDetails(Async)");
        }

        return getSegmentDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Segment> getSegmentDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getSegmentDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSegmentDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Segment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSegmentDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Segment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSegmentDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetSegmentDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetSegmentDetailsRequestBuilder
         */
        public GetSegmentDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetSegmentDetailsRequestBuilder
         */
        public GetSegmentDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getSegmentDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSegmentDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getSegmentDetails request
         * @return Segment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Segment execute() throws ApiException {
            ApiResponse<Segment> localVarResp = getSegmentDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSegmentDetails request with HTTP info returned
         * @return ApiResponse&lt;Segment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Segment> executeWithHttpInfo() throws ApiException {
            return getSegmentDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getSegmentDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Segment> _callback) throws ApiException {
            return getSegmentDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Segment Details
     * Get details for a specific segment using its unique identifier.
     * @param id ID of the segment (required)
     * @return GetSegmentDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetSegmentDetailsRequestBuilder getSegmentDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSegmentDetailsRequestBuilder(id);
    }
    private okhttp3.Call getSubgenreDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/classifications/subgenres/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubgenreDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSubgenreDetails(Async)");
        }

        return getSubgenreDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Level> getSubgenreDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getSubgenreDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Level>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSubgenreDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Level> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubgenreDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Level>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSubgenreDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetSubgenreDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetSubgenreDetailsRequestBuilder
         */
        public GetSubgenreDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetSubgenreDetailsRequestBuilder
         */
        public GetSubgenreDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getSubgenreDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSubgenreDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getSubgenreDetails request
         * @return Level
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Level execute() throws ApiException {
            ApiResponse<Level> localVarResp = getSubgenreDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSubgenreDetails request with HTTP info returned
         * @return ApiResponse&lt;Level&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Level> executeWithHttpInfo() throws ApiException {
            return getSubgenreDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getSubgenreDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Level> _callback) throws ApiException {
            return getSubgenreDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Sub-Genre Details
     * Get details for a specific sub-genre using its unique identifier.
     * @param id ID of the subgenre (required)
     * @return GetSubgenreDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetSubgenreDetailsRequestBuilder getSubgenreDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSubgenreDetailsRequestBuilder(id);
    }
    private okhttp3.Call getVenueDetailsCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/venues/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVenueDetailsValidateBeforeCall(String id, String locale, String includeLicensedContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVenueDetails(Async)");
        }

        return getVenueDetailsCall(id, locale, includeLicensedContent, _callback);

    }


    private ApiResponse<Venue> getVenueDetailsWithHttpInfo(String id, String locale, String includeLicensedContent) throws ApiException {
        okhttp3.Call localVarCall = getVenueDetailsValidateBeforeCall(id, locale, includeLicensedContent, null);
        Type localVarReturnType = new TypeToken<Venue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVenueDetailsAsync(String id, String locale, String includeLicensedContent, final ApiCallback<Venue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVenueDetailsValidateBeforeCall(id, locale, includeLicensedContent, _callback);
        Type localVarReturnType = new TypeToken<Venue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVenueDetailsRequestBuilder {
        private final String id;
        private String locale;
        private String includeLicensedContent;

        private GetVenueDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return GetVenueDetailsRequestBuilder
         */
        public GetVenueDetailsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent True if you want to display licensed content (optional, default to false)
         * @return GetVenueDetailsRequestBuilder
         */
        public GetVenueDetailsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Build call for getVenueDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVenueDetailsCall(id, locale, includeLicensedContent, _callback);
        }


        /**
         * Execute getVenueDetails request
         * @return Venue
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Venue execute() throws ApiException {
            ApiResponse<Venue> localVarResp = getVenueDetailsWithHttpInfo(id, locale, includeLicensedContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVenueDetails request with HTTP info returned
         * @return ApiResponse&lt;Venue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Venue> executeWithHttpInfo() throws ApiException {
            return getVenueDetailsWithHttpInfo(id, locale, includeLicensedContent);
        }

        /**
         * Execute getVenueDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Venue> _callback) throws ApiException {
            return getVenueDetailsAsync(id, locale, includeLicensedContent, _callback);
        }
    }

    /**
     * Get Venue Details
     * Get details for a specific venue using the unique identifier for the venue.
     * @param id ID of the venue (required)
     * @return GetVenueDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetVenueDetailsRequestBuilder getVenueDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetVenueDetailsRequestBuilder(id);
    }
    private okhttp3.Call searchAttractionsCall(String sort, List<Object> classificationName, List<Object> classificationId, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/attractions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (classificationName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "classificationName", classificationName));
        }

        if (classificationId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "classificationId", classificationId));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (includeTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTest", includeTest));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        if (includeSpellcheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSpellcheck", includeSpellcheck));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAttractionsValidateBeforeCall(String sort, List<Object> classificationName, List<Object> classificationId, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        return searchAttractionsCall(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);

    }


    private ApiResponse<List<Attraction>> searchAttractionsWithHttpInfo(String sort, List<Object> classificationName, List<Object> classificationId, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck) throws ApiException {
        okhttp3.Call localVarCall = searchAttractionsValidateBeforeCall(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, null);
        Type localVarReturnType = new TypeToken<List<Attraction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAttractionsAsync(String sort, List<Object> classificationName, List<Object> classificationId, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback<List<Attraction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAttractionsValidateBeforeCall(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        Type localVarReturnType = new TypeToken<List<Attraction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAttractionsRequestBuilder {
        private String sort;
        private List<Object> classificationName;
        private List<Object> classificationId;
        private String keyword;
        private String id;
        private String source;
        private String includeTest;
        private String page;
        private String size;
        private String locale;
        private String includeLicensedContent;
        private String includeSpellcheck;

        private SearchAttractionsRequestBuilder() {
        }

        /**
         * Set sort
         * @param sort Sorting order of the search result. Allowable Values : &#39;name,asc&#39;, &#39;name,desc&#39;, &#39;relevance,asc&#39;, &#39;relevance,desc&#39; (optional, default to relevance,desc)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set classificationName
         * @param classificationName Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type (optional)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder classificationName(List<Object> classificationName) {
            this.classificationName = classificationName;
            return this;
        }
        
        /**
         * Set classificationId
         * @param classificationId Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type (optional)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder classificationId(List<Object> classificationId) {
            this.classificationId = classificationId;
            return this;
        }
        
        /**
         * Set keyword
         * @param keyword Keyword to search on (optional, default to )
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }
        
        /**
         * Set id
         * @param id Filter entities by its id (optional, default to )
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set source
         * @param source Filter entities by its source name (optional, default to )
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set includeTest
         * @param includeTest True if you want to have entities flag as test in the response. Only, if you only wanted test entities (optional, default to false)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder includeTest(String includeTest) {
            this.includeTest = includeTest;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 0)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set size
         * @param size Page size of the response (optional, default to 20)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent Yes if you want to display licensed content (optional, default to false)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Set includeSpellcheck
         * @param includeSpellcheck yes, to include spell check suggestions in the response. (optional, default to false)
         * @return SearchAttractionsRequestBuilder
         */
        public SearchAttractionsRequestBuilder includeSpellcheck(String includeSpellcheck) {
            this.includeSpellcheck = includeSpellcheck;
            return this;
        }
        
        /**
         * Build call for searchAttractions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAttractionsCall(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }


        /**
         * Execute searchAttractions request
         * @return List&lt;Attraction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Attraction> execute() throws ApiException {
            ApiResponse<List<Attraction>> localVarResp = searchAttractionsWithHttpInfo(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAttractions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Attraction&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Attraction>> executeWithHttpInfo() throws ApiException {
            return searchAttractionsWithHttpInfo(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
        }

        /**
         * Execute searchAttractions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Attraction>> _callback) throws ApiException {
            return searchAttractionsAsync(sort, classificationName, classificationId, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }
    }

    /**
     * Attraction Search
     * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
     * @return SearchAttractionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SearchAttractionsRequestBuilder searchAttractions() throws IllegalArgumentException {
        return new SearchAttractionsRequestBuilder();
    }
    private okhttp3.Call searchClassificationsCall(String sort, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/v2/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (includeTest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTest", includeTest));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (includeLicensedContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeLicensedContent", includeLicensedContent));
        }

        if (includeSpellcheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSpellcheck", includeSpellcheck));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchClassificationsValidateBeforeCall(String sort, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback _callback) throws ApiException {
        return searchClassificationsCall(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);

    }


    private ApiResponse<List<Classification>> searchClassificationsWithHttpInfo(String sort, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck) throws ApiException {
        okhttp3.Call localVarCall = searchClassificationsValidateBeforeCall(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, null);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchClassificationsAsync(String sort, String keyword, String id, String source, String includeTest, String page, String size, String locale, String includeLicensedContent, String includeSpellcheck, final ApiCallback<List<Classification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchClassificationsValidateBeforeCall(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        Type localVarReturnType = new TypeToken<List<Classification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchClassificationsRequestBuilder {
        private String sort;
        private String keyword;
        private String id;
        private String source;
        private String includeTest;
        private String page;
        private String size;
        private String locale;
        private String includeLicensedContent;
        private String includeSpellcheck;

        private SearchClassificationsRequestBuilder() {
        }

        /**
         * Set sort
         * @param sort Sorting order of the search result (optional, default to name,asc)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set keyword
         * @param keyword Keyword to search on (optional, default to )
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder keyword(String keyword) {
            this.keyword = keyword;
            return this;
        }
        
        /**
         * Set id
         * @param id Filter entities by its id (optional, default to )
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set source
         * @param source Filter entities by its source name (optional, default to )
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set includeTest
         * @param includeTest True if you want to have entities flag as test in the response. Only, if you only wanted test entities (optional, default to false)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder includeTest(String includeTest) {
            this.includeTest = includeTest;
            return this;
        }
        
        /**
         * Set page
         * @param page Page number (optional, default to 0)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set size
         * @param size Page size of the response (optional, default to 20)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder size(String size) {
            this.size = size;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only &#39;en&#39; or &#39;fr&#39;) then the first matching locale is used. When using a &#39;*&#39; it matches all locales. &#39;*&#39; can only be used at the end (e.g. &#39;en-us,en,*&#39;)  (optional, default to en)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set includeLicensedContent
         * @param includeLicensedContent Yes if you want to display licensed content (optional, default to false)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder includeLicensedContent(String includeLicensedContent) {
            this.includeLicensedContent = includeLicensedContent;
            return this;
        }
        
        /**
         * Set includeSpellcheck
         * @param includeSpellcheck yes, to include spell check suggestions in the response. (optional, default to false)
         * @return SearchClassificationsRequestBuilder
         */
        public SearchClassificationsRequestBuilder includeSpellcheck(String includeSpellcheck) {
            this.includeSpellcheck = includeSpellcheck;
            return this;
        }
        
        /**
         * Build call for searchClassifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchClassificationsCall(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }


        /**
         * Execute searchClassifications request
         * @return List&lt;Classification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Classification> execute() throws ApiException {
            ApiResponse<List<Classification>> localVarResp = searchClassificationsWithHttpInfo(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchClassifications request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Classification&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Classification>> executeWithHttpInfo() throws ApiException {
            return searchClassificationsWithHttpInfo(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck);
        }

        /**
         * Execute searchClassifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Classification>> _callback) throws ApiException {
            return searchClassificationsAsync(sort, keyword, id, source, includeTest, page, size, locale, includeLicensedContent, includeSpellcheck, _callback);
        }
    }

    /**
     * Classification Search
     * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
     * @return SearchClassificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SearchClassificationsRequestBuilder searchClassifications() throws IllegalArgumentException {
        return new SearchClassificationsRequestBuilder();
    }
}
