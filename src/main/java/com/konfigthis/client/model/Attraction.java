/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.ExternalLink;
import com.konfigthis.client.model.Image;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Attraction
 */
@ApiModel(description = "Attraction")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Attraction {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<Classification> classifications = null;

  public static final String SERIALIZED_NAME_EXTERNAL_LINKS = "externalLinks";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINKS)
  private Map<String, List<ExternalLink>> externalLinks = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = null;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPCOMING_EVENTS = "upcomingEvents";
  @SerializedName(SERIALIZED_NAME_UPCOMING_EVENTS)
  private Map<String, Integer> upcomingEvents = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Attraction() {
  }

  public Attraction description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description&#39;s of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description's of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Attraction additionalInfo(String additionalInfo) {
    
    
    
    
    this.additionalInfo = additionalInfo;
    return this;
  }

   /**
   * Additional information of the entity
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information of the entity")

  public String getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(String additionalInfo) {
    
    
    
    this.additionalInfo = additionalInfo;
  }


  public Attraction classifications(List<Classification> classifications) {
    
    
    
    
    this.classifications = classifications;
    return this;
  }

  public Attraction addClassificationsItem(Classification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Attraction&#39;s classifications
   * @return classifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attraction's classifications")

  public List<Classification> getClassifications() {
    return classifications;
  }


  public void setClassifications(List<Classification> classifications) {
    
    
    
    this.classifications = classifications;
  }


  public Attraction externalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    
    this.externalLinks = externalLinks;
    return this;
  }

  public Attraction putExternalLinksItem(String key, List<ExternalLink> externalLinksItem) {
    if (this.externalLinks == null) {
      this.externalLinks = new HashMap<>();
    }
    this.externalLinks.put(key, externalLinksItem);
    return this;
  }

   /**
   * List of external links
   * @return externalLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of external links")

  public Map<String, List<ExternalLink>> getExternalLinks() {
    return externalLinks;
  }


  public void setExternalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    this.externalLinks = externalLinks;
  }


  public Attraction id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique id of the entity in the discovery API
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique id of the entity in the discovery API")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Attraction images(Set<Image> images) {
    
    
    
    
    this.images = images;
    return this;
  }

  public Attraction addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Images of the entity
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Images of the entity")

  public Set<Image> getImages() {
    return images;
  }


  public void setImages(Set<Image> images) {
    
    
    
    this.images = images;
  }


  public Attraction locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Locale in which the content is returned
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Locale in which the content is returned")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public Attraction name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Attraction test(Boolean test) {
    
    
    
    
    this.test = test;
    return this;
  }

   /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicate if this is a test entity, by default test entities won't appear in discovery API")

  public Boolean getTest() {
    return test;
  }


  public void setTest(Boolean test) {
    
    
    
    this.test = test;
  }


  public Attraction type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the entity
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of the entity")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Attraction upcomingEvents(Map<String, Integer> upcomingEvents) {
    
    
    
    
    this.upcomingEvents = upcomingEvents;
    return this;
  }

  public Attraction putUpcomingEventsItem(String key, Integer upcomingEventsItem) {
    if (this.upcomingEvents == null) {
      this.upcomingEvents = new HashMap<>();
    }
    this.upcomingEvents.put(key, upcomingEventsItem);
    return this;
  }

   /**
   * number of upcoming events
   * @return upcomingEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of upcoming events")

  public Map<String, Integer> getUpcomingEvents() {
    return upcomingEvents;
  }


  public void setUpcomingEvents(Map<String, Integer> upcomingEvents) {
    
    
    
    this.upcomingEvents = upcomingEvents;
  }


  public Attraction url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * URL of a web site detail page of the entity
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of a web site detail page of the entity")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Attraction instance itself
   */
  public Attraction putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attraction attraction = (Attraction) o;
    return Objects.equals(this.description, attraction.description) &&
        Objects.equals(this.additionalInfo, attraction.additionalInfo) &&
        Objects.equals(this.classifications, attraction.classifications) &&
        Objects.equals(this.externalLinks, attraction.externalLinks) &&
        Objects.equals(this.id, attraction.id) &&
        Objects.equals(this.images, attraction.images) &&
        Objects.equals(this.locale, attraction.locale) &&
        Objects.equals(this.name, attraction.name) &&
        Objects.equals(this.test, attraction.test) &&
        Objects.equals(this.type, attraction.type) &&
        Objects.equals(this.upcomingEvents, attraction.upcomingEvents) &&
        Objects.equals(this.url, attraction.url)&&
        Objects.equals(this.additionalProperties, attraction.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, additionalInfo, classifications, externalLinks, id, images, locale, name, test, type, upcomingEvents, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attraction {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    externalLinks: ").append(toIndentedString(externalLinks)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    upcomingEvents: ").append(toIndentedString(upcomingEvents)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("additionalInfo");
    openapiFields.add("classifications");
    openapiFields.add("externalLinks");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("test");
    openapiFields.add("type");
    openapiFields.add("upcomingEvents");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Attraction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Attraction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attraction is not found in the empty JSON string", Attraction.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attraction.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonNull()) {
        JsonArray jsonArrayclassifications = jsonObj.getAsJsonArray("classifications");
        if (jsonArrayclassifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
          }

          // validate the optional field `classifications` (array)
          for (int i = 0; i < jsonArrayclassifications.size(); i++) {
            Classification.validateJsonObject(jsonArrayclassifications.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attraction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attraction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attraction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attraction.class));

       return (TypeAdapter<T>) new TypeAdapter<Attraction>() {
           @Override
           public void write(JsonWriter out, Attraction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Attraction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Attraction instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Attraction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Attraction
  * @throws IOException if the JSON string is invalid with respect to Attraction
  */
  public static Attraction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attraction.class);
  }

 /**
  * Convert an instance of Attraction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

