/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Attribution
 */
@ApiModel(description = "Attribution")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Attribution {
  public static final String SERIALIZED_NAME_LICENCE_NAME = "licenceName";
  @SerializedName(SERIALIZED_NAME_LICENCE_NAME)
  private String licenceName;

  public static final String SERIALIZED_NAME_LICENCE_URL = "licenceUrl";
  @SerializedName(SERIALIZED_NAME_LICENCE_URL)
  private String licenceUrl;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public Attribution() {
  }

  public Attribution licenceName(String licenceName) {
    
    
    
    
    this.licenceName = licenceName;
    return this;
  }

   /**
   * LicenceName
   * @return licenceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "LicenceName")

  public String getLicenceName() {
    return licenceName;
  }


  public void setLicenceName(String licenceName) {
    
    
    
    this.licenceName = licenceName;
  }


  public Attribution licenceUrl(String licenceUrl) {
    
    
    
    
    this.licenceUrl = licenceUrl;
    return this;
  }

   /**
   * LicenceUrl
   * @return licenceUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "LicenceUrl")

  public String getLicenceUrl() {
    return licenceUrl;
  }


  public void setLicenceUrl(String licenceUrl) {
    
    
    
    this.licenceUrl = licenceUrl;
  }


  public Attribution sourceName(String sourceName) {
    
    
    
    
    this.sourceName = sourceName;
    return this;
  }

   /**
   * SourceName
   * @return sourceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SourceName")

  public String getSourceName() {
    return sourceName;
  }


  public void setSourceName(String sourceName) {
    
    
    
    this.sourceName = sourceName;
  }


  public Attribution sourceUrl(String sourceUrl) {
    
    
    
    
    this.sourceUrl = sourceUrl;
    return this;
  }

   /**
   * SourceUrl
   * @return sourceUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SourceUrl")

  public String getSourceUrl() {
    return sourceUrl;
  }


  public void setSourceUrl(String sourceUrl) {
    
    
    
    this.sourceUrl = sourceUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Attribution instance itself
   */
  public Attribution putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attribution attribution = (Attribution) o;
    return Objects.equals(this.licenceName, attribution.licenceName) &&
        Objects.equals(this.licenceUrl, attribution.licenceUrl) &&
        Objects.equals(this.sourceName, attribution.sourceName) &&
        Objects.equals(this.sourceUrl, attribution.sourceUrl)&&
        Objects.equals(this.additionalProperties, attribution.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenceName, licenceUrl, sourceName, sourceUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attribution {\n");
    sb.append("    licenceName: ").append(toIndentedString(licenceName)).append("\n");
    sb.append("    licenceUrl: ").append(toIndentedString(licenceUrl)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("licenceName");
    openapiFields.add("licenceUrl");
    openapiFields.add("sourceName");
    openapiFields.add("sourceUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Attribution
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Attribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attribution is not found in the empty JSON string", Attribution.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("licenceName") != null && !jsonObj.get("licenceName").isJsonNull()) && !jsonObj.get("licenceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenceName").toString()));
      }
      if ((jsonObj.get("licenceUrl") != null && !jsonObj.get("licenceUrl").isJsonNull()) && !jsonObj.get("licenceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenceUrl").toString()));
      }
      if ((jsonObj.get("sourceName") != null && !jsonObj.get("sourceName").isJsonNull()) && !jsonObj.get("sourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceName").toString()));
      }
      if ((jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) && !jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attribution.class));

       return (TypeAdapter<T>) new TypeAdapter<Attribution>() {
           @Override
           public void write(JsonWriter out, Attribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Attribution read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Attribution instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Attribution given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Attribution
  * @throws IOException if the JSON string is invalid with respect to Attribution
  */
  public static Attribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attribution.class);
  }

 /**
  * Convert an instance of Attribution to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

