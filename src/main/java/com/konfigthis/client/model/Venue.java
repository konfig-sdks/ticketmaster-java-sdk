/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.City;
import com.konfigthis.client.model.Country;
import com.konfigthis.client.model.Dma;
import com.konfigthis.client.model.ExternalLink;
import com.konfigthis.client.model.Image;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.Market;
import com.konfigthis.client.model.Social;
import com.konfigthis.client.model.State;
import com.konfigthis.client.model.VenueBoxOfficeInfo;
import com.konfigthis.client.model.VenueGeneralInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Venue
 */
@ApiModel(description = "Venue")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Venue {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCESSIBLE_SEATING_DETAIL = "accessibleSeatingDetail";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_SEATING_DETAIL)
  private String accessibleSeatingDetail;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BOX_OFFICE_INFO = "boxOfficeInfo";
  @SerializedName(SERIALIZED_NAME_BOX_OFFICE_INFO)
  private VenueBoxOfficeInfo boxOfficeInfo;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private City city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_DMA = "dma";
  @SerializedName(SERIALIZED_NAME_DMA)
  private List<Dma> dma = null;

  public static final String SERIALIZED_NAME_EXTERNAL_LINKS = "externalLinks";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINKS)
  private Map<String, List<ExternalLink>> externalLinks = null;

  public static final String SERIALIZED_NAME_GENERAL_INFO = "generalInfo";
  @SerializedName(SERIALIZED_NAME_GENERAL_INFO)
  private VenueGeneralInfo generalInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = null;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_MARKETS = "markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<Market> markets = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARKING_DETAIL = "parkingDetail";
  @SerializedName(SERIALIZED_NAME_PARKING_DETAIL)
  private String parkingDetail;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SOCIAL = "social";
  @SerializedName(SERIALIZED_NAME_SOCIAL)
  private Social social;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_UPCOMING_EVENTS = "upcomingEvents";
  @SerializedName(SERIALIZED_NAME_UPCOMING_EVENTS)
  private Map<String, Integer> upcomingEvents = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Venue() {
  }

  public Venue description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description&#39;s of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description's of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Venue accessibleSeatingDetail(String accessibleSeatingDetail) {
    
    
    
    
    this.accessibleSeatingDetail = accessibleSeatingDetail;
    return this;
  }

   /**
   * Venue accessible seating detail
   * @return accessibleSeatingDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Venue accessible seating detail")

  public String getAccessibleSeatingDetail() {
    return accessibleSeatingDetail;
  }


  public void setAccessibleSeatingDetail(String accessibleSeatingDetail) {
    
    
    
    this.accessibleSeatingDetail = accessibleSeatingDetail;
  }


  public Venue additionalInfo(String additionalInfo) {
    
    
    
    
    this.additionalInfo = additionalInfo;
    return this;
  }

   /**
   * Additional information of the entity
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information of the entity")

  public String getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(String additionalInfo) {
    
    
    
    this.additionalInfo = additionalInfo;
  }


  public Venue address(Address address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    
    
    
    this.address = address;
  }


  public Venue boxOfficeInfo(VenueBoxOfficeInfo boxOfficeInfo) {
    
    
    
    
    this.boxOfficeInfo = boxOfficeInfo;
    return this;
  }

   /**
   * Get boxOfficeInfo
   * @return boxOfficeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VenueBoxOfficeInfo getBoxOfficeInfo() {
    return boxOfficeInfo;
  }


  public void setBoxOfficeInfo(VenueBoxOfficeInfo boxOfficeInfo) {
    
    
    
    this.boxOfficeInfo = boxOfficeInfo;
  }


  public Venue city(City city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public City getCity() {
    return city;
  }


  public void setCity(City city) {
    
    
    
    this.city = city;
  }


  public Venue country(Country country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Country getCountry() {
    return country;
  }


  public void setCountry(Country country) {
    
    
    
    this.country = country;
  }


  public Venue currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Default currency of ticket prices for events in this venue
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default currency of ticket prices for events in this venue")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public Venue distance(Double distance) {
    
    
    
    
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDistance() {
    return distance;
  }


  public void setDistance(Double distance) {
    
    
    
    this.distance = distance;
  }


  public Venue dma(List<Dma> dma) {
    
    
    
    
    this.dma = dma;
    return this;
  }

  public Venue addDmaItem(Dma dmaItem) {
    if (this.dma == null) {
      this.dma = new ArrayList<>();
    }
    this.dma.add(dmaItem);
    return this;
  }

   /**
   * The list of associated DMAs (Designated Market Areas) of the venue
   * @return dma
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of associated DMAs (Designated Market Areas) of the venue")

  public List<Dma> getDma() {
    return dma;
  }


  public void setDma(List<Dma> dma) {
    
    
    
    this.dma = dma;
  }


  public Venue externalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    
    this.externalLinks = externalLinks;
    return this;
  }

  public Venue putExternalLinksItem(String key, List<ExternalLink> externalLinksItem) {
    if (this.externalLinks == null) {
      this.externalLinks = new HashMap<>();
    }
    this.externalLinks.put(key, externalLinksItem);
    return this;
  }

   /**
   * List of external links
   * @return externalLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of external links")

  public Map<String, List<ExternalLink>> getExternalLinks() {
    return externalLinks;
  }


  public void setExternalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    this.externalLinks = externalLinks;
  }


  public Venue generalInfo(VenueGeneralInfo generalInfo) {
    
    
    
    
    this.generalInfo = generalInfo;
    return this;
  }

   /**
   * Get generalInfo
   * @return generalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VenueGeneralInfo getGeneralInfo() {
    return generalInfo;
  }


  public void setGeneralInfo(VenueGeneralInfo generalInfo) {
    
    
    
    this.generalInfo = generalInfo;
  }


  public Venue id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique id of the entity in the discovery API
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique id of the entity in the discovery API")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Venue images(Set<Image> images) {
    
    
    
    
    this.images = images;
    return this;
  }

  public Venue addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Images of the entity
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Images of the entity")

  public Set<Image> getImages() {
    return images;
  }


  public void setImages(Set<Image> images) {
    
    
    
    this.images = images;
  }


  public Venue locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Locale in which the content is returned
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Locale in which the content is returned")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public Venue location(Location location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    
    
    
    this.location = location;
  }


  public Venue markets(List<Market> markets) {
    
    
    
    
    this.markets = markets;
    return this;
  }

  public Venue addMarketsItem(Market marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

   /**
   * Markets of the venue
   * @return markets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Markets of the venue")

  public List<Market> getMarkets() {
    return markets;
  }


  public void setMarkets(List<Market> markets) {
    
    
    
    this.markets = markets;
  }


  public Venue name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Venue parkingDetail(String parkingDetail) {
    
    
    
    
    this.parkingDetail = parkingDetail;
    return this;
  }

   /**
   * Venue parking info
   * @return parkingDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Venue parking info")

  public String getParkingDetail() {
    return parkingDetail;
  }


  public void setParkingDetail(String parkingDetail) {
    
    
    
    this.parkingDetail = parkingDetail;
  }


  public Venue postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal code / zipcode of the venue
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code / zipcode of the venue")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public Venue social(Social social) {
    
    
    
    
    this.social = social;
    return this;
  }

   /**
   * Get social
   * @return social
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Social getSocial() {
    return social;
  }


  public void setSocial(Social social) {
    
    
    
    this.social = social;
  }


  public Venue state(State state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public State getState() {
    return state;
  }


  public void setState(State state) {
    
    
    
    this.state = state;
  }


  public Venue test(Boolean test) {
    
    
    
    
    this.test = test;
    return this;
  }

   /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicate if this is a test entity, by default test entities won't appear in discovery API")

  public Boolean getTest() {
    return test;
  }


  public void setTest(Boolean test) {
    
    
    
    this.test = test;
  }


  public Venue timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Timezone of the venue
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timezone of the venue")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public Venue type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the entity
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of the entity")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Venue units(String units) {
    
    
    
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    
    
    
    this.units = units;
  }


  public Venue upcomingEvents(Map<String, Integer> upcomingEvents) {
    
    
    
    
    this.upcomingEvents = upcomingEvents;
    return this;
  }

  public Venue putUpcomingEventsItem(String key, Integer upcomingEventsItem) {
    if (this.upcomingEvents == null) {
      this.upcomingEvents = new HashMap<>();
    }
    this.upcomingEvents.put(key, upcomingEventsItem);
    return this;
  }

   /**
   * number of upcoming events
   * @return upcomingEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of upcoming events")

  public Map<String, Integer> getUpcomingEvents() {
    return upcomingEvents;
  }


  public void setUpcomingEvents(Map<String, Integer> upcomingEvents) {
    
    
    
    this.upcomingEvents = upcomingEvents;
  }


  public Venue url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * URL of a web site detail page of the entity
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of a web site detail page of the entity")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Venue instance itself
   */
  public Venue putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Venue venue = (Venue) o;
    return Objects.equals(this.description, venue.description) &&
        Objects.equals(this.accessibleSeatingDetail, venue.accessibleSeatingDetail) &&
        Objects.equals(this.additionalInfo, venue.additionalInfo) &&
        Objects.equals(this.address, venue.address) &&
        Objects.equals(this.boxOfficeInfo, venue.boxOfficeInfo) &&
        Objects.equals(this.city, venue.city) &&
        Objects.equals(this.country, venue.country) &&
        Objects.equals(this.currency, venue.currency) &&
        Objects.equals(this.distance, venue.distance) &&
        Objects.equals(this.dma, venue.dma) &&
        Objects.equals(this.externalLinks, venue.externalLinks) &&
        Objects.equals(this.generalInfo, venue.generalInfo) &&
        Objects.equals(this.id, venue.id) &&
        Objects.equals(this.images, venue.images) &&
        Objects.equals(this.locale, venue.locale) &&
        Objects.equals(this.location, venue.location) &&
        Objects.equals(this.markets, venue.markets) &&
        Objects.equals(this.name, venue.name) &&
        Objects.equals(this.parkingDetail, venue.parkingDetail) &&
        Objects.equals(this.postalCode, venue.postalCode) &&
        Objects.equals(this.social, venue.social) &&
        Objects.equals(this.state, venue.state) &&
        Objects.equals(this.test, venue.test) &&
        Objects.equals(this.timezone, venue.timezone) &&
        Objects.equals(this.type, venue.type) &&
        Objects.equals(this.units, venue.units) &&
        Objects.equals(this.upcomingEvents, venue.upcomingEvents) &&
        Objects.equals(this.url, venue.url)&&
        Objects.equals(this.additionalProperties, venue.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, accessibleSeatingDetail, additionalInfo, address, boxOfficeInfo, city, country, currency, distance, dma, externalLinks, generalInfo, id, images, locale, location, markets, name, parkingDetail, postalCode, social, state, test, timezone, type, units, upcomingEvents, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Venue {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    accessibleSeatingDetail: ").append(toIndentedString(accessibleSeatingDetail)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    boxOfficeInfo: ").append(toIndentedString(boxOfficeInfo)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    dma: ").append(toIndentedString(dma)).append("\n");
    sb.append("    externalLinks: ").append(toIndentedString(externalLinks)).append("\n");
    sb.append("    generalInfo: ").append(toIndentedString(generalInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parkingDetail: ").append(toIndentedString(parkingDetail)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    social: ").append(toIndentedString(social)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    upcomingEvents: ").append(toIndentedString(upcomingEvents)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("accessibleSeatingDetail");
    openapiFields.add("additionalInfo");
    openapiFields.add("address");
    openapiFields.add("boxOfficeInfo");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("distance");
    openapiFields.add("dma");
    openapiFields.add("externalLinks");
    openapiFields.add("generalInfo");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("locale");
    openapiFields.add("location");
    openapiFields.add("markets");
    openapiFields.add("name");
    openapiFields.add("parkingDetail");
    openapiFields.add("postalCode");
    openapiFields.add("social");
    openapiFields.add("state");
    openapiFields.add("test");
    openapiFields.add("timezone");
    openapiFields.add("type");
    openapiFields.add("units");
    openapiFields.add("upcomingEvents");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Venue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Venue.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Venue is not found in the empty JSON string", Venue.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Venue.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("accessibleSeatingDetail") != null && !jsonObj.get("accessibleSeatingDetail").isJsonNull()) && !jsonObj.get("accessibleSeatingDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessibleSeatingDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessibleSeatingDetail").toString()));
      }
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      // validate the optional field `boxOfficeInfo`
      if (jsonObj.get("boxOfficeInfo") != null && !jsonObj.get("boxOfficeInfo").isJsonNull()) {
        VenueBoxOfficeInfo.validateJsonObject(jsonObj.getAsJsonObject("boxOfficeInfo"));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        City.validateJsonObject(jsonObj.getAsJsonObject("city"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        Country.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("dma") != null && !jsonObj.get("dma").isJsonNull()) {
        JsonArray jsonArraydma = jsonObj.getAsJsonArray("dma");
        if (jsonArraydma != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dma").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dma` to be an array in the JSON string but got `%s`", jsonObj.get("dma").toString()));
          }

          // validate the optional field `dma` (array)
          for (int i = 0; i < jsonArraydma.size(); i++) {
            Dma.validateJsonObject(jsonArraydma.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `generalInfo`
      if (jsonObj.get("generalInfo") != null && !jsonObj.get("generalInfo").isJsonNull()) {
        VenueGeneralInfo.validateJsonObject(jsonObj.getAsJsonObject("generalInfo"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if (jsonObj.get("markets") != null && !jsonObj.get("markets").isJsonNull()) {
        JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("markets");
        if (jsonArraymarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markets` to be an array in the JSON string but got `%s`", jsonObj.get("markets").toString()));
          }

          // validate the optional field `markets` (array)
          for (int i = 0; i < jsonArraymarkets.size(); i++) {
            Market.validateJsonObject(jsonArraymarkets.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parkingDetail") != null && !jsonObj.get("parkingDetail").isJsonNull()) && !jsonObj.get("parkingDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parkingDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parkingDetail").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      // validate the optional field `social`
      if (jsonObj.get("social") != null && !jsonObj.get("social").isJsonNull()) {
        Social.validateJsonObject(jsonObj.getAsJsonObject("social"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        State.validateJsonObject(jsonObj.getAsJsonObject("state"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Venue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Venue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Venue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Venue.class));

       return (TypeAdapter<T>) new TypeAdapter<Venue>() {
           @Override
           public void write(JsonWriter out, Venue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Venue read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Venue instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Venue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Venue
  * @throws IOException if the JSON string is invalid with respect to Venue
  */
  public static Venue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Venue.class);
  }

 /**
  * Convert an instance of Venue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

