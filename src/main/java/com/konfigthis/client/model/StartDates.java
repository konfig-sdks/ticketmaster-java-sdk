/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.joda.time.*;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Event&#39;s Start Dates
 */
@ApiModel(description = "Event's Start Dates")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StartDates {
  public static final String SERIALIZED_NAME_DATE_T_B_A = "dateTBA";
  @SerializedName(SERIALIZED_NAME_DATE_T_B_A)
  private Boolean dateTBA = false;

  public static final String SERIALIZED_NAME_DATE_T_B_D = "dateTBD";
  @SerializedName(SERIALIZED_NAME_DATE_T_B_D)
  private Boolean dateTBD = false;

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public static final String SERIALIZED_NAME_LOCAL_DATE = "localDate";
  @SerializedName(SERIALIZED_NAME_LOCAL_DATE)
  private LocalDate localDate;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "localTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private LocalTime localTime;

  public static final String SERIALIZED_NAME_NO_SPECIFIC_TIME = "noSpecificTime";
  @SerializedName(SERIALIZED_NAME_NO_SPECIFIC_TIME)
  private Boolean noSpecificTime = false;

  public static final String SERIALIZED_NAME_TIME_T_B_A = "timeTBA";
  @SerializedName(SERIALIZED_NAME_TIME_T_B_A)
  private Boolean timeTBA = false;

  public StartDates() {
  }

  public StartDates dateTBA(Boolean dateTBA) {
    
    
    
    
    this.dateTBA = dateTBA;
    return this;
  }

   /**
   * Boolean flag to indicate whether or not the start date is TBA
   * @return dateTBA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Boolean flag to indicate whether or not the start date is TBA")

  public Boolean getDateTBA() {
    return dateTBA;
  }


  public void setDateTBA(Boolean dateTBA) {
    
    
    
    this.dateTBA = dateTBA;
  }


  public StartDates dateTBD(Boolean dateTBD) {
    
    
    
    
    this.dateTBD = dateTBD;
    return this;
  }

   /**
   * Boolean flag to indicate whether or not the start date is TBD
   * @return dateTBD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Boolean flag to indicate whether or not the start date is TBD")

  public Boolean getDateTBD() {
    return dateTBD;
  }


  public void setDateTBD(Boolean dateTBD) {
    
    
    
    this.dateTBD = dateTBD;
  }


  public StartDates dateTime(OffsetDateTime dateTime) {
    
    
    
    
    this.dateTime = dateTime;
    return this;
  }

   /**
   * The event start datetime
   * @return dateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The event start datetime")

  public OffsetDateTime getDateTime() {
    return dateTime;
  }


  public void setDateTime(OffsetDateTime dateTime) {
    
    
    
    this.dateTime = dateTime;
  }


  public StartDates localDate(LocalDate localDate) {
    
    
    
    
    this.localDate = localDate;
    return this;
  }

   /**
   * The event start date in local date
   * @return localDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The event start date in local date")

  public LocalDate getLocalDate() {
    return localDate;
  }


  public void setLocalDate(LocalDate localDate) {
    
    
    
    this.localDate = localDate;
  }


  public StartDates localTime(LocalTime localTime) {
    
    
    
    
    this.localTime = localTime;
    return this;
  }

   /**
   * Get localTime
   * @return localTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalTime getLocalTime() {
    return localTime;
  }


  public void setLocalTime(LocalTime localTime) {
    
    
    
    this.localTime = localTime;
  }


  public StartDates noSpecificTime(Boolean noSpecificTime) {
    
    
    
    
    this.noSpecificTime = noSpecificTime;
    return this;
  }

   /**
   * Boolean flag to indicate whether or not the event start time has no specific time
   * @return noSpecificTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Boolean flag to indicate whether or not the event start time has no specific time")

  public Boolean getNoSpecificTime() {
    return noSpecificTime;
  }


  public void setNoSpecificTime(Boolean noSpecificTime) {
    
    
    
    this.noSpecificTime = noSpecificTime;
  }


  public StartDates timeTBA(Boolean timeTBA) {
    
    
    
    
    this.timeTBA = timeTBA;
    return this;
  }

   /**
   * Boolean flag to indicate whether or not the start time is TBA
   * @return timeTBA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Boolean flag to indicate whether or not the start time is TBA")

  public Boolean getTimeTBA() {
    return timeTBA;
  }


  public void setTimeTBA(Boolean timeTBA) {
    
    
    
    this.timeTBA = timeTBA;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StartDates instance itself
   */
  public StartDates putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartDates startDates = (StartDates) o;
    return Objects.equals(this.dateTBA, startDates.dateTBA) &&
        Objects.equals(this.dateTBD, startDates.dateTBD) &&
        Objects.equals(this.dateTime, startDates.dateTime) &&
        Objects.equals(this.localDate, startDates.localDate) &&
        Objects.equals(this.localTime, startDates.localTime) &&
        Objects.equals(this.noSpecificTime, startDates.noSpecificTime) &&
        Objects.equals(this.timeTBA, startDates.timeTBA)&&
        Objects.equals(this.additionalProperties, startDates.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTBA, dateTBD, dateTime, localDate, localTime, noSpecificTime, timeTBA, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartDates {\n");
    sb.append("    dateTBA: ").append(toIndentedString(dateTBA)).append("\n");
    sb.append("    dateTBD: ").append(toIndentedString(dateTBD)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    localDate: ").append(toIndentedString(localDate)).append("\n");
    sb.append("    localTime: ").append(toIndentedString(localTime)).append("\n");
    sb.append("    noSpecificTime: ").append(toIndentedString(noSpecificTime)).append("\n");
    sb.append("    timeTBA: ").append(toIndentedString(timeTBA)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateTBA");
    openapiFields.add("dateTBD");
    openapiFields.add("dateTime");
    openapiFields.add("localDate");
    openapiFields.add("localTime");
    openapiFields.add("noSpecificTime");
    openapiFields.add("timeTBA");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StartDates
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StartDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartDates is not found in the empty JSON string", StartDates.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `localTime`
      if (jsonObj.get("localTime") != null && !jsonObj.get("localTime").isJsonNull()) {
        LocalTime.validateJsonObject(jsonObj.getAsJsonObject("localTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartDates.class));

       return (TypeAdapter<T>) new TypeAdapter<StartDates>() {
           @Override
           public void write(JsonWriter out, StartDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StartDates read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StartDates instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StartDates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StartDates
  * @throws IOException if the JSON string is invalid with respect to StartDates
  */
  public static StartDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartDates.class);
  }

 /**
  * Convert an instance of StartDates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

