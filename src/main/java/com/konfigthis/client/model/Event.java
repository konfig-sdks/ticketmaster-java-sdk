/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Accessibility;
import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.EventDates;
import com.konfigthis.client.model.EventSalesDates;
import com.konfigthis.client.model.ExternalLink;
import com.konfigthis.client.model.Image;
import com.konfigthis.client.model.Location;
import com.konfigthis.client.model.Outlet;
import com.konfigthis.client.model.Place;
import com.konfigthis.client.model.PriceRange;
import com.konfigthis.client.model.Product;
import com.konfigthis.client.model.Promoter;
import com.konfigthis.client.model.SeatMap;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Event
 */
@ApiModel(description = "Event")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Event {
  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private String info;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private Accessibility accessibility;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<Classification> classifications = null;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private EventDates dates;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_EXTERNAL_LINKS = "externalLinks";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINKS)
  private Map<String, List<ExternalLink>> externalLinks = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = null;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTLETS = "outlets";
  @SerializedName(SERIALIZED_NAME_OUTLETS)
  private List<Outlet> outlets = null;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private Place place;

  public static final String SERIALIZED_NAME_PLEASE_NOTE = "pleaseNote";
  @SerializedName(SERIALIZED_NAME_PLEASE_NOTE)
  private String pleaseNote;

  public static final String SERIALIZED_NAME_PRICE_RANGES = "priceRanges";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGES)
  private Set<PriceRange> priceRanges = null;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<Product> products = null;

  public static final String SERIALIZED_NAME_PROMOTER = "promoter";
  @SerializedName(SERIALIZED_NAME_PROMOTER)
  private Promoter promoter;

  public static final String SERIALIZED_NAME_PROMOTERS = "promoters";
  @SerializedName(SERIALIZED_NAME_PROMOTERS)
  private List<Promoter> promoters = null;

  public static final String SERIALIZED_NAME_SALES = "sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  private EventSalesDates sales;

  public static final String SERIALIZED_NAME_SEATMAP = "seatmap";
  @SerializedName(SERIALIZED_NAME_SEATMAP)
  private SeatMap seatmap;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Event() {
  }

  public Event info(String info) {
    
    
    
    
    this.info = info;
    return this;
  }

   /**
   * Any information related to the event
   * @return info
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any information related to the event")

  public String getInfo() {
    return info;
  }


  public void setInfo(String info) {
    
    
    
    this.info = info;
  }


  public Event description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description&#39;s of the entity
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description's of the entity")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Event accessibility(Accessibility accessibility) {
    
    
    
    
    this.accessibility = accessibility;
    return this;
  }

   /**
   * Get accessibility
   * @return accessibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Accessibility getAccessibility() {
    return accessibility;
  }


  public void setAccessibility(Accessibility accessibility) {
    
    
    
    this.accessibility = accessibility;
  }


  public Event additionalInfo(String additionalInfo) {
    
    
    
    
    this.additionalInfo = additionalInfo;
    return this;
  }

   /**
   * Additional information of the entity
   * @return additionalInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information of the entity")

  public String getAdditionalInfo() {
    return additionalInfo;
  }


  public void setAdditionalInfo(String additionalInfo) {
    
    
    
    this.additionalInfo = additionalInfo;
  }


  public Event classifications(List<Classification> classifications) {
    
    
    
    
    this.classifications = classifications;
    return this;
  }

  public Event addClassificationsItem(Classification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Event&#39;s classifications
   * @return classifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event's classifications")

  public List<Classification> getClassifications() {
    return classifications;
  }


  public void setClassifications(List<Classification> classifications) {
    
    
    
    this.classifications = classifications;
  }


  public Event dates(EventDates dates) {
    
    
    
    
    this.dates = dates;
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventDates getDates() {
    return dates;
  }


  public void setDates(EventDates dates) {
    
    
    
    this.dates = dates;
  }


  public Event distance(Double distance) {
    
    
    
    
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDistance() {
    return distance;
  }


  public void setDistance(Double distance) {
    
    
    
    this.distance = distance;
  }


  public Event externalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    
    this.externalLinks = externalLinks;
    return this;
  }

  public Event putExternalLinksItem(String key, List<ExternalLink> externalLinksItem) {
    if (this.externalLinks == null) {
      this.externalLinks = new HashMap<>();
    }
    this.externalLinks.put(key, externalLinksItem);
    return this;
  }

   /**
   * List of external links
   * @return externalLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of external links")

  public Map<String, List<ExternalLink>> getExternalLinks() {
    return externalLinks;
  }


  public void setExternalLinks(Map<String, List<ExternalLink>> externalLinks) {
    
    
    
    this.externalLinks = externalLinks;
  }


  public Event id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique id of the entity in the discovery API
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique id of the entity in the discovery API")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Event images(Set<Image> images) {
    
    
    
    
    this.images = images;
    return this;
  }

  public Event addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Images of the entity
   * @return images
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Images of the entity")

  public Set<Image> getImages() {
    return images;
  }


  public void setImages(Set<Image> images) {
    
    
    
    this.images = images;
  }


  public Event locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Locale in which the content is returned
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Locale in which the content is returned")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public Event location(Location location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    
    
    
    this.location = location;
  }


  public Event name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the entity
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the entity")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Event outlets(List<Outlet> outlets) {
    
    
    
    
    this.outlets = outlets;
    return this;
  }

  public Event addOutletsItem(Outlet outletsItem) {
    if (this.outlets == null) {
      this.outlets = new ArrayList<>();
    }
    this.outlets.add(outletsItem);
    return this;
  }

   /**
   * Related outlets informations
   * @return outlets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Related outlets informations")

  public List<Outlet> getOutlets() {
    return outlets;
  }


  public void setOutlets(List<Outlet> outlets) {
    
    
    
    this.outlets = outlets;
  }


  public Event place(Place place) {
    
    
    
    
    this.place = place;
    return this;
  }

   /**
   * Get place
   * @return place
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Place getPlace() {
    return place;
  }


  public void setPlace(Place place) {
    
    
    
    this.place = place;
  }


  public Event pleaseNote(String pleaseNote) {
    
    
    
    
    this.pleaseNote = pleaseNote;
    return this;
  }

   /**
   * Any notes related to the event
   * @return pleaseNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any notes related to the event")

  public String getPleaseNote() {
    return pleaseNote;
  }


  public void setPleaseNote(String pleaseNote) {
    
    
    
    this.pleaseNote = pleaseNote;
  }


  public Event priceRanges(Set<PriceRange> priceRanges) {
    
    
    
    
    this.priceRanges = priceRanges;
    return this;
  }

  public Event addPriceRangesItem(PriceRange priceRangesItem) {
    if (this.priceRanges == null) {
      this.priceRanges = new LinkedHashSet<>();
    }
    this.priceRanges.add(priceRangesItem);
    return this;
  }

   /**
   * Price ranges of this event
   * @return priceRanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Price ranges of this event")

  public Set<PriceRange> getPriceRanges() {
    return priceRanges;
  }


  public void setPriceRanges(Set<PriceRange> priceRanges) {
    
    
    
    this.priceRanges = priceRanges;
  }


  public Event products(List<Product> products) {
    
    
    
    
    this.products = products;
    return this;
  }

  public Event addProductsItem(Product productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * Related products informations
   * @return products
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Related products informations")

  public List<Product> getProducts() {
    return products;
  }


  public void setProducts(List<Product> products) {
    
    
    
    this.products = products;
  }


  public Event promoter(Promoter promoter) {
    
    
    
    
    this.promoter = promoter;
    return this;
  }

   /**
   * Get promoter
   * @return promoter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Promoter getPromoter() {
    return promoter;
  }


  public void setPromoter(Promoter promoter) {
    
    
    
    this.promoter = promoter;
  }


  public Event promoters(List<Promoter> promoters) {
    
    
    
    
    this.promoters = promoters;
    return this;
  }

  public Event addPromotersItem(Promoter promotersItem) {
    if (this.promoters == null) {
      this.promoters = new ArrayList<>();
    }
    this.promoters.add(promotersItem);
    return this;
  }

   /**
   * Event&#39;s promoters
   * @return promoters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event's promoters")

  public List<Promoter> getPromoters() {
    return promoters;
  }


  public void setPromoters(List<Promoter> promoters) {
    
    
    
    this.promoters = promoters;
  }


  public Event sales(EventSalesDates sales) {
    
    
    
    
    this.sales = sales;
    return this;
  }

   /**
   * Get sales
   * @return sales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventSalesDates getSales() {
    return sales;
  }


  public void setSales(EventSalesDates sales) {
    
    
    
    this.sales = sales;
  }


  public Event seatmap(SeatMap seatmap) {
    
    
    
    
    this.seatmap = seatmap;
    return this;
  }

   /**
   * Get seatmap
   * @return seatmap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SeatMap getSeatmap() {
    return seatmap;
  }


  public void setSeatmap(SeatMap seatmap) {
    
    
    
    this.seatmap = seatmap;
  }


  public Event test(Boolean test) {
    
    
    
    
    this.test = test;
    return this;
  }

   /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Indicate if this is a test entity, by default test entities won't appear in discovery API")

  public Boolean getTest() {
    return test;
  }


  public void setTest(Boolean test) {
    
    
    
    this.test = test;
  }


  public Event type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the entity
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of the entity")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Event units(String units) {
    
    
    
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    
    
    
    this.units = units;
  }


  public Event url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * URL of a web site detail page of the entity
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of a web site detail page of the entity")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Event instance itself
   */
  public Event putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.info, event.info) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.accessibility, event.accessibility) &&
        Objects.equals(this.additionalInfo, event.additionalInfo) &&
        Objects.equals(this.classifications, event.classifications) &&
        Objects.equals(this.dates, event.dates) &&
        Objects.equals(this.distance, event.distance) &&
        Objects.equals(this.externalLinks, event.externalLinks) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.images, event.images) &&
        Objects.equals(this.locale, event.locale) &&
        Objects.equals(this.location, event.location) &&
        Objects.equals(this.name, event.name) &&
        Objects.equals(this.outlets, event.outlets) &&
        Objects.equals(this.place, event.place) &&
        Objects.equals(this.pleaseNote, event.pleaseNote) &&
        Objects.equals(this.priceRanges, event.priceRanges) &&
        Objects.equals(this.products, event.products) &&
        Objects.equals(this.promoter, event.promoter) &&
        Objects.equals(this.promoters, event.promoters) &&
        Objects.equals(this.sales, event.sales) &&
        Objects.equals(this.seatmap, event.seatmap) &&
        Objects.equals(this.test, event.test) &&
        Objects.equals(this.type, event.type) &&
        Objects.equals(this.units, event.units) &&
        Objects.equals(this.url, event.url)&&
        Objects.equals(this.additionalProperties, event.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(info, description, accessibility, additionalInfo, classifications, dates, distance, externalLinks, id, images, locale, location, name, outlets, place, pleaseNote, priceRanges, products, promoter, promoters, sales, seatmap, test, type, units, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    externalLinks: ").append(toIndentedString(externalLinks)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outlets: ").append(toIndentedString(outlets)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    pleaseNote: ").append(toIndentedString(pleaseNote)).append("\n");
    sb.append("    priceRanges: ").append(toIndentedString(priceRanges)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    promoter: ").append(toIndentedString(promoter)).append("\n");
    sb.append("    promoters: ").append(toIndentedString(promoters)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    seatmap: ").append(toIndentedString(seatmap)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("info");
    openapiFields.add("description");
    openapiFields.add("accessibility");
    openapiFields.add("additionalInfo");
    openapiFields.add("classifications");
    openapiFields.add("dates");
    openapiFields.add("distance");
    openapiFields.add("externalLinks");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("locale");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("outlets");
    openapiFields.add("place");
    openapiFields.add("pleaseNote");
    openapiFields.add("priceRanges");
    openapiFields.add("products");
    openapiFields.add("promoter");
    openapiFields.add("promoters");
    openapiFields.add("sales");
    openapiFields.add("seatmap");
    openapiFields.add("test");
    openapiFields.add("type");
    openapiFields.add("units");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Event
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) && !jsonObj.get("info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `accessibility`
      if (jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) {
        Accessibility.validateJsonObject(jsonObj.getAsJsonObject("accessibility"));
      }
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonNull()) {
        JsonArray jsonArrayclassifications = jsonObj.getAsJsonArray("classifications");
        if (jsonArrayclassifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
          }

          // validate the optional field `classifications` (array)
          for (int i = 0; i < jsonArrayclassifications.size(); i++) {
            Classification.validateJsonObject(jsonArrayclassifications.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        EventDates.validateJsonObject(jsonObj.getAsJsonObject("dates"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outlets") != null && !jsonObj.get("outlets").isJsonNull()) {
        JsonArray jsonArrayoutlets = jsonObj.getAsJsonArray("outlets");
        if (jsonArrayoutlets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outlets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outlets` to be an array in the JSON string but got `%s`", jsonObj.get("outlets").toString()));
          }

          // validate the optional field `outlets` (array)
          for (int i = 0; i < jsonArrayoutlets.size(); i++) {
            Outlet.validateJsonObject(jsonArrayoutlets.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        Place.validateJsonObject(jsonObj.getAsJsonObject("place"));
      }
      if ((jsonObj.get("pleaseNote") != null && !jsonObj.get("pleaseNote").isJsonNull()) && !jsonObj.get("pleaseNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pleaseNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pleaseNote").toString()));
      }
      if (jsonObj.get("priceRanges") != null && !jsonObj.get("priceRanges").isJsonNull()) {
        JsonArray jsonArraypriceRanges = jsonObj.getAsJsonArray("priceRanges");
        if (jsonArraypriceRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceRanges` to be an array in the JSON string but got `%s`", jsonObj.get("priceRanges").toString()));
          }

          // validate the optional field `priceRanges` (array)
          for (int i = 0; i < jsonArraypriceRanges.size(); i++) {
            PriceRange.validateJsonObject(jsonArraypriceRanges.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            Product.validateJsonObject(jsonArrayproducts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `promoter`
      if (jsonObj.get("promoter") != null && !jsonObj.get("promoter").isJsonNull()) {
        Promoter.validateJsonObject(jsonObj.getAsJsonObject("promoter"));
      }
      if (jsonObj.get("promoters") != null && !jsonObj.get("promoters").isJsonNull()) {
        JsonArray jsonArraypromoters = jsonObj.getAsJsonArray("promoters");
        if (jsonArraypromoters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promoters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promoters` to be an array in the JSON string but got `%s`", jsonObj.get("promoters").toString()));
          }

          // validate the optional field `promoters` (array)
          for (int i = 0; i < jsonArraypromoters.size(); i++) {
            Promoter.validateJsonObject(jsonArraypromoters.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `sales`
      if (jsonObj.get("sales") != null && !jsonObj.get("sales").isJsonNull()) {
        EventSalesDates.validateJsonObject(jsonObj.getAsJsonObject("sales"));
      }
      // validate the optional field `seatmap`
      if (jsonObj.get("seatmap") != null && !jsonObj.get("seatmap").isJsonNull()) {
        SeatMap.validateJsonObject(jsonObj.getAsJsonObject("seatmap"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Event instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Event given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Event
  * @throws IOException if the JSON string is invalid with respect to Event
  */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

 /**
  * Convert an instance of Event to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

