/*
 * Discovery API
 * The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Attraction;
import com.konfigthis.client.model.Classification;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.EventImages;
import com.konfigthis.client.model.Genre;
import com.konfigthis.client.model.Level;
import com.konfigthis.client.model.Segment;
import com.konfigthis.client.model.Venue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Disabled
public class V2ApiTest {

    private static V2Api api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new V2Api(apiClient);
    }

    /**
     * Event Search
     *
     * Find events and filter your search by location, date, availability, and much more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSearchTest() throws ApiException {
        String sort = null;
        String startDateTime = null;
        String endDateTime = null;
        String onsaleStartDateTime = null;
        String onsaleOnStartDate = null;
        String onsaleOnAfterStartDate = null;
        String onsaleEndDateTime = null;
        String city = null;
        String countryCode = null;
        String stateCode = null;
        String postalCode = null;
        String venueId = null;
        String attractionId = null;
        String segmentId = null;
        String segmentName = null;
        List<Object> classificationName = null;
        List<Object> classificationId = null;
        String marketId = null;
        String promoterId = null;
        String dmaId = null;
        String includeTBA = null;
        String includeTBD = null;
        String clientVisibility = null;
        String latlong = null;
        String radius = null;
        String unit = null;
        String geoPoint = null;
        String keyword = null;
        String id = null;
        String source = null;
        String includeTest = null;
        String page = null;
        String size = null;
        String locale = null;
        String includeLicensedContent = null;
        String includeSpellcheck = null;
        List<Event> response = api.eventSearch()
                .sort(sort)
                .startDateTime(startDateTime)
                .endDateTime(endDateTime)
                .onsaleStartDateTime(onsaleStartDateTime)
                .onsaleOnStartDate(onsaleOnStartDate)
                .onsaleOnAfterStartDate(onsaleOnAfterStartDate)
                .onsaleEndDateTime(onsaleEndDateTime)
                .city(city)
                .countryCode(countryCode)
                .stateCode(stateCode)
                .postalCode(postalCode)
                .venueId(venueId)
                .attractionId(attractionId)
                .segmentId(segmentId)
                .segmentName(segmentName)
                .classificationName(classificationName)
                .classificationId(classificationId)
                .marketId(marketId)
                .promoterId(promoterId)
                .dmaId(dmaId)
                .includeTBA(includeTBA)
                .includeTBD(includeTBD)
                .clientVisibility(clientVisibility)
                .latlong(latlong)
                .radius(radius)
                .unit(unit)
                .geoPoint(geoPoint)
                .keyword(keyword)
                .id(id)
                .source(source)
                .includeTest(includeTest)
                .page(page)
                .size(size)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .includeSpellcheck(includeSpellcheck)
                .execute();
        // TODO: test validations
    }

    /**
     * Find Suggest
     *
     * Find search suggestions and filter your suggestions by location, source, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSuggestTest() throws ApiException {
        String keyword = null;
        String source = null;
        String latlong = null;
        String radius = null;
        String unit = null;
        String size = null;
        String includeFuzzy = null;
        String clientVisibility = null;
        String countryCode = null;
        String includeTBA = null;
        String includeTBD = null;
        String segmentId = null;
        String geoPoint = null;
        String locale = null;
        String includeLicensedContent = null;
        String includeSpellcheck = null;
        String response = api.findSuggest()
                .keyword(keyword)
                .source(source)
                .latlong(latlong)
                .radius(radius)
                .unit(unit)
                .size(size)
                .includeFuzzy(includeFuzzy)
                .clientVisibility(clientVisibility)
                .countryCode(countryCode)
                .includeTBA(includeTBA)
                .includeTBD(includeTBD)
                .segmentId(segmentId)
                .geoPoint(geoPoint)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .includeSpellcheck(includeSpellcheck)
                .execute();
        // TODO: test validations
    }

    /**
     * Venue Search
     *
     * Find venues and filter your search by name, and much more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findVenuesTest() throws ApiException {
        String sort = null;
        String stateCode = null;
        String countryCode = null;
        String latlong = null;
        String radius = null;
        String unit = null;
        String geoPoint = null;
        String keyword = null;
        String id = null;
        String source = null;
        String includeTest = null;
        String page = null;
        String size = null;
        String locale = null;
        String includeLicensedContent = null;
        String includeSpellcheck = null;
        List<Venue> response = api.findVenues()
                .sort(sort)
                .stateCode(stateCode)
                .countryCode(countryCode)
                .latlong(latlong)
                .radius(radius)
                .unit(unit)
                .geoPoint(geoPoint)
                .keyword(keyword)
                .id(id)
                .source(source)
                .includeTest(includeTest)
                .page(page)
                .size(size)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .includeSpellcheck(includeSpellcheck)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Attraction Details
     *
     * Get details for a specific attraction using the unique identifier for the attraction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttractionDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Attraction response = api.getAttractionDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Classification Details
     *
     * Get details for a specific segment, genre, or sub-genre using its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClassificationDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Classification response = api.getClassificationDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Event Details
     *
     * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Event response = api.getEventDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Event Images
     *
     * Get images for a specific event using the unique identifier for the event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventImagesTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        EventImages response = api.getEventImages(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Genre Details
     *
     * Get details for a specific genre using its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGenreDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Genre response = api.getGenreDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Segment Details
     *
     * Get details for a specific segment using its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Segment response = api.getSegmentDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Sub-Genre Details
     *
     * Get details for a specific sub-genre using its unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubgenreDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Level response = api.getSubgenreDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Venue Details
     *
     * Get details for a specific venue using the unique identifier for the venue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVenueDetailsTest() throws ApiException {
        String id = null;
        String locale = null;
        String includeLicensedContent = null;
        Venue response = api.getVenueDetails(id)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Attraction Search
     *
     * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAttractionsTest() throws ApiException {
        String sort = null;
        List<Object> classificationName = null;
        List<Object> classificationId = null;
        String keyword = null;
        String id = null;
        String source = null;
        String includeTest = null;
        String page = null;
        String size = null;
        String locale = null;
        String includeLicensedContent = null;
        String includeSpellcheck = null;
        List<Attraction> response = api.searchAttractions()
                .sort(sort)
                .classificationName(classificationName)
                .classificationId(classificationId)
                .keyword(keyword)
                .id(id)
                .source(source)
                .includeTest(includeTest)
                .page(page)
                .size(size)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .includeSpellcheck(includeSpellcheck)
                .execute();
        // TODO: test validations
    }

    /**
     * Classification Search
     *
     * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchClassificationsTest() throws ApiException {
        String sort = null;
        String keyword = null;
        String id = null;
        String source = null;
        String includeTest = null;
        String page = null;
        String size = null;
        String locale = null;
        String includeLicensedContent = null;
        String includeSpellcheck = null;
        List<Classification> response = api.searchClassifications()
                .sort(sort)
                .keyword(keyword)
                .id(id)
                .source(source)
                .includeTest(includeTest)
                .page(page)
                .size(size)
                .locale(locale)
                .includeLicensedContent(includeLicensedContent)
                .includeSpellcheck(includeSpellcheck)
                .execute();
        // TODO: test validations
    }

}
